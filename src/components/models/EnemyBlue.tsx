/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React, { Ref, forwardRef, useEffect, useRef } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useFrame, useThree } from '@react-three/fiber';
import { isColliding } from '../controls/helpers/isColliding';
import { collisionDistance, gravity } from '../../global/constants';
import { RigidBody } from '@react-three/rapier';

type GLTFResult = GLTF & {
  nodes: {
    Body_2: THREE.SkinnedMesh;
    Body_3: THREE.SkinnedMesh;
    Body_4: THREE.SkinnedMesh;
    Ears: THREE.SkinnedMesh;
    Head_2: THREE.SkinnedMesh;
    Head_3: THREE.SkinnedMesh;
    Head_4: THREE.SkinnedMesh;
    Head_5: THREE.SkinnedMesh;
    Head_6: THREE.SkinnedMesh;
    Arms_1: THREE.SkinnedMesh;
    Arms_2: THREE.SkinnedMesh;
    Root: THREE.Bone;
  };
  materials: {
    Main: THREE.MeshStandardMaterial;
    Main_Light: THREE.MeshStandardMaterial;
    Main2: THREE.MeshStandardMaterial;
    EyeColor: THREE.MeshStandardMaterial;
    White: THREE.MeshStandardMaterial;
    Black: THREE.MeshStandardMaterial;
  };
};

type ActionName =
  | 'CharacterArmature|Death'
  | 'CharacterArmature|Duck'
  | 'CharacterArmature|HitReact'
  | 'CharacterArmature|Idle'
  | 'CharacterArmature|Idle_Gun'
  | 'CharacterArmature|Idle_Shoot'
  | 'CharacterArmature|Jump'
  | 'CharacterArmature|Jump_Idle'
  | 'CharacterArmature|Jump_Land'
  | 'CharacterArmature|No'
  | 'CharacterArmature|Punch'
  | 'CharacterArmature|Run'
  | 'CharacterArmature|Run_Gun'
  | 'CharacterArmature|Run_Shoot'
  | 'CharacterArmature|Walk'
  | 'CharacterArmature|Walk_Gun'
  | 'CharacterArmature|Wave'
  | 'CharacterArmature|Yes';
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

export const EnemyBlue = forwardRef(
  ({
    props,
    isHit,
  }: {
    props: JSX.IntrinsicElements['group'];
    isHit: boolean;
  }) => {
    const group = useRef<THREE.Group | null>(null);
    const downward = new THREE.Vector3(0, -1, 0);
    const raycaster = new THREE.Raycaster();
    const { camera, scene } = useThree();
    const velocity = useRef<number>(0);
    const { nodes, materials, animations } = useGLTF(
      '/models/EnemyBlue.glb'
    ) as GLTFResult;
    const { actions } = useAnimations<THREE.AnimationClip>(animations, group);
    const typedActions = actions as GLTFActions;
    console.log(isHit);

    useEffect(() => {
      if (isHit) {
        typedActions['CharacterArmature|HitReact'].reset().fadeIn(0.5).play();
      }

      return () => {
        typedActions['CharacterArmature|HitReact'].fadeOut(0.5);
      };
    }, [isHit]);

    useFrame(() => {
      if (group.current) {
        const isOnGround = isColliding({
          direction: downward,
          raycaster,
          rayStartPosition: group.current.position,
          collisionDistance,
          intersectObjects: scene.children,
        });
        if (!isOnGround) {
          // Update velocity and position for gravity
          const newVelocity = velocity.current - gravity * 0.02; // Gravity effect
          group.current.position.y += newVelocity * 0.02; // Update position
          velocity.current = newVelocity;
        } else {
          velocity.current = 0;
        }
      }
    });

    return (
      <group
        ref={group}
        {...props}
        dispose={null}
        userData={{ enemy: true }}
      >
        <group
          name="Root_Scene"
          userData={{ enemy: true }}
        >
          <group name="RootNode">
            <group
              name="CharacterArmature"
              rotation={[-Math.PI / 2, 0, 0]}
              scale={100}
            >
              <primitive object={nodes.Root} />
            </group>
            <group
              name="Body_1"
              rotation={[-Math.PI / 2, 0, 0]}
              scale={100}
            >
              <skinnedMesh
                name="Body_2"
                geometry={nodes.Body_2.geometry}
                material={materials.Main}
                skeleton={nodes.Body_2.skeleton}
              />
              <skinnedMesh
                name="Body_3"
                geometry={nodes.Body_3.geometry}
                material={materials.Main_Light}
                skeleton={nodes.Body_3.skeleton}
              />
              <skinnedMesh
                name="Body_4"
                geometry={nodes.Body_4.geometry}
                material={materials.Main2}
                skeleton={nodes.Body_4.skeleton}
              />
            </group>
            <skinnedMesh
              name="Ears"
              geometry={nodes.Ears.geometry}
              material={materials.Main}
              skeleton={nodes.Ears.skeleton}
              rotation={[-Math.PI / 2, 0, 0]}
              scale={100}
            />
            <group
              name="Head_1"
              rotation={[-Math.PI / 2, 0, 0]}
              scale={100}
            >
              <skinnedMesh
                name="Head_2"
                geometry={nodes.Head_2.geometry}
                material={materials.Main}
                skeleton={nodes.Head_2.skeleton}
              />
              <skinnedMesh
                name="Head_3"
                geometry={nodes.Head_3.geometry}
                material={materials.Main_Light}
                skeleton={nodes.Head_3.skeleton}
              />
              <skinnedMesh
                name="Head_4"
                geometry={nodes.Head_4.geometry}
                material={materials.EyeColor}
                skeleton={nodes.Head_4.skeleton}
              />
              <skinnedMesh
                name="Head_5"
                geometry={nodes.Head_5.geometry}
                material={materials.White}
                skeleton={nodes.Head_5.skeleton}
              />
              <skinnedMesh
                name="Head_6"
                geometry={nodes.Head_6.geometry}
                material={materials.Black}
                skeleton={nodes.Head_6.skeleton}
              />
            </group>
            <group
              name="Arms"
              rotation={[-Math.PI / 2, 0, 0]}
              scale={100}
            >
              <skinnedMesh
                name="Arms_1"
                geometry={nodes.Arms_1.geometry}
                material={materials.Main}
                skeleton={nodes.Arms_1.skeleton}
              />
              <skinnedMesh
                name="Arms_2"
                geometry={nodes.Arms_2.geometry}
                material={materials.Main_Light}
                skeleton={nodes.Arms_2.skeleton}
              />
            </group>
          </group>
        </group>
      </group>
    );
  }
);

useGLTF.preload('/models/EnemyBlue.glb');
